# 함수

# 코드 복붙 = 버그 발생 가능성이 높아짐
# 함수 사용 = 여러 코드를 하나의 함수로 묶어서 관리하기 편함
# 함수명 = 소문자, 한글(불가피할시) / 각 함수를 구별하는 유일한 식별자(1개)
# 매개변수 = 함수 실행에 필요한 값들(0개 이상)
# 반환값 = 함수 실행에 대한 결과 즉 보고하는 값(1개)

# int, float, str, bool, none -> 단일값
# list, tuple, set, dict -> 단일값이지만 다수의 값을 반환하는 효과
# [1, 2, 3] = list
# (1, 2, 3) = tuple
# {1, 2, 3} = set
# {"a":1, "b":2} = dict

# 함수 인자의 2가지 유형(위치, 이름)
# 위치 = Positional Arguments
# 인덱스로 각 인자를 구분
# 인자 순서가 바뀌면 인자가 엉뚱하게 저장됨
# def 봉급계산(기본급, 야근시간)
# 봉급계산(800000, 20) = 위치에 기반
# 이름 = Keyword Arguments
# 키워드로 각 인자를 구분
# 인자 순서가 바뀌어도 괜찮음
# def 봉급계산(기본급, 야근시간)
# 봉급계산(기본급=800000, 야근시간=20) = 키워드로 지정
# 섞어쓸경우 = 봉급계산(800000, 야근시간=20)
# 위치에 기반한 인자가 이름에 기반한 인자보다 무조건 앞

# 디폴트 인자
# 디폴트 값이 지정된 인자는 함수 호출 시에 인자를 지정하지 않는다면 디폴트값이 할당된다
# 실습했던 캡쳐 활용 연습 할것

# 익명함수 = lambda x, y : x + y + 10
# return문을 쓰지 않아도 평가 결과를 반환
# 짧은 함수를 정의할때 주로 사용
# 기본 이름이 없을 뿐 함수와 동일하게 처리
# 이름 지정 가능 mysum = lamda x, y : x + y + 10

# 빌트인 함수
# print, range, int, float, str, list, tuple, set, dict
# abs
